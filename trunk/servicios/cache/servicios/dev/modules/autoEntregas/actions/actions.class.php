<?php
// auto-generated by sfPropelAdmin
// date: 2007/11/23 01:44:37
?>
<?php

/**
 * autoEntregas actions.
 *
 * @package    ##PROJECT_NAME##
 * @subpackage autoEntregas
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id: actions.class.php 3501 2007-02-18 10:28:17Z fabien $
 */
class autoEntregasActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('entregas', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->filters = $this->getUser()->getAttributeHolder()->getAll('sf_admin/entregas/filters');

    // pager
    $this->pager = new sfPropelPager('Entregas', 20);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', 1));
    $this->pager->init();
  }

  public function executeCreate()
  {
    return $this->forward('entregas', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('entregas', 'edit');
  }

  public function executeEdit()
  {
    $this->entregas = $this->getEntregasOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateEntregasFromRequest();

      $this->saveEntregas($this->entregas);

      $this->setFlash('notice', 'Your modifications have been saved');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('entregas/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('entregas/list');
      }
      else
      {
        return $this->redirect('entregas/edit?id='.$this->entregas->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->entregas = EntregasPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->entregas);

    try
    {
      $this->deleteEntregas($this->entregas);
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'Could not delete the selected Entregas. Make sure it does not have any associated items.');
      return $this->forward('entregas', 'list');
    }

    return $this->redirect('entregas/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->entregas = $this->getEntregasOrCreate();
    $this->updateEntregasFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function saveEntregas($entregas)
  {
    $entregas->save();

  }

  protected function deleteEntregas($entregas)
  {
    $entregas->delete();
  }

  protected function updateEntregasFromRequest()
  {
    $entregas = $this->getRequestParameter('entregas');

    if (isset($entregas['servicios_id']))
    {
    $this->entregas->setServiciosId($entregas['servicios_id'] ? $entregas['servicios_id'] : null);
    }
    if (isset($entregas['observacion']))
    {
      $this->entregas->setObservacion($entregas['observacion']);
    }
    if (isset($entregas['fecha']))
    {
      if ($entregas['fecha'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($entregas['fecha']))
          {
            $value = $dateFormat->format($entregas['fecha'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $entregas['fecha'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->entregas->setFecha($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->entregas->setFecha(null);
      }
    }
  }

  protected function getEntregasOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $entregas = new Entregas();
    }
    else
    {
      $entregas = EntregasPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($entregas);
    }

    return $entregas;
  }

  protected function processFilters()
  {
    if ($this->getRequest()->hasParameter('filter'))
    {
      $filters = $this->getRequestParameter('filters');
      if (isset($filters['fecha']['from']) && $filters['fecha']['from'] !== '')
      {
        $filters['fecha']['from'] = sfI18N::getTimestampForCulture($filters['fecha']['from'], $this->getUser()->getCulture());
      }
      if (isset($filters['fecha']['to']) && $filters['fecha']['to'] !== '')
      {
        $filters['fecha']['to'] = sfI18N::getTimestampForCulture($filters['fecha']['to'], $this->getUser()->getCulture());
      }

      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/entregas/filters');
      $this->getUser()->getAttributeHolder()->add($filters, 'sf_admin/entregas/filters');
    }
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/entregas/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/entregas/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/entregas/sort'))
    {
    }
  }

  protected function addFiltersCriteria($c)
  {
    if (isset($this->filters['servicios_id_is_empty']))
    {
      $criterion = $c->getNewCriterion(EntregasPeer::SERVICIOS_ID, '');
      $criterion->addOr($c->getNewCriterion(EntregasPeer::SERVICIOS_ID, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['servicios_id']) && $this->filters['servicios_id'] !== '')
    {
      $c->add(EntregasPeer::SERVICIOS_ID, $this->filters['servicios_id']);
    }
    if (isset($this->filters['observacion_is_empty']))
    {
      $criterion = $c->getNewCriterion(EntregasPeer::OBSERVACION, '');
      $criterion->addOr($c->getNewCriterion(EntregasPeer::OBSERVACION, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['observacion']) && $this->filters['observacion'] !== '')
    {
      $c->add(EntregasPeer::OBSERVACION, strtr($this->filters['observacion'], '*', '%'), Criteria::LIKE);
    }
    if (isset($this->filters['fecha_is_empty']))
    {
      $criterion = $c->getNewCriterion(EntregasPeer::FECHA, '');
      $criterion->addOr($c->getNewCriterion(EntregasPeer::FECHA, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['fecha']))
    {
      if (isset($this->filters['fecha']['from']) && $this->filters['fecha']['from'] !== '')
      {
        $criterion = $c->getNewCriterion(EntregasPeer::FECHA, date('Y-m-d', $this->filters['fecha']['from']), Criteria::GREATER_EQUAL);
      }
      if (isset($this->filters['fecha']['to']) && $this->filters['fecha']['to'] !== '')
      {
        if (isset($criterion))
        {
          $criterion->addAnd($c->getNewCriterion(EntregasPeer::FECHA, date('Y-m-d', $this->filters['fecha']['to']), Criteria::LESS_EQUAL));
        }
        else
        {
          $criterion = $c->getNewCriterion(EntregasPeer::FECHA, date('Y-m-d', $this->filters['fecha']['to']), Criteria::LESS_EQUAL);
        }
      }

      if (isset($criterion))
      {
        $c->add($criterion);
      }
    }
  }

  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/entregas/sort'))
    {
      $sort_column = EntregasPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/entregas/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'entregas{servicios_id}' => 'Cliente:',
      'entregas{observacion}' => 'Observaciones:',
      'entregas{fecha}' => 'Fecha:',
    );
  }
}
