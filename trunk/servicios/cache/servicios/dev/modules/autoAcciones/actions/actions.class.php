<?php
// auto-generated by sfPropelAdmin
// date: 2007/11/23 00:30:44
?>
<?php

/**
 * autoAcciones actions.
 *
 * @package    ##PROJECT_NAME##
 * @subpackage autoAcciones
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id: actions.class.php 3501 2007-02-18 10:28:17Z fabien $
 */
class autoAccionesActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('acciones', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->filters = $this->getUser()->getAttributeHolder()->getAll('sf_admin/acciones/filters');

    // pager
    $this->pager = new sfPropelPager('Acciones', 20);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', 1));
    $this->pager->init();
  }

  public function executeCreate()
  {
    return $this->forward('acciones', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('acciones', 'edit');
  }

  public function executeEdit()
  {
    $this->acciones = $this->getAccionesOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateAccionesFromRequest();

      $this->saveAcciones($this->acciones);

      $this->setFlash('notice', 'Your modifications have been saved');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('acciones/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('acciones/list');
      }
      else
      {
        return $this->redirect('acciones/edit?id='.$this->acciones->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->acciones = AccionesPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->acciones);

    try
    {
      $this->deleteAcciones($this->acciones);
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'Could not delete the selected Acciones. Make sure it does not have any associated items.');
      return $this->forward('acciones', 'list');
    }

    return $this->redirect('acciones/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->acciones = $this->getAccionesOrCreate();
    $this->updateAccionesFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function saveAcciones($acciones)
  {
    $acciones->save();

  }

  protected function deleteAcciones($acciones)
  {
    $acciones->delete();
  }

  protected function updateAccionesFromRequest()
  {
    $acciones = $this->getRequestParameter('acciones');

    if (isset($acciones['servicios_id']))
    {
    $this->acciones->setServiciosId($acciones['servicios_id'] ? $acciones['servicios_id'] : null);
    }
    if (isset($acciones['accion']))
    {
      $this->acciones->setAccion($acciones['accion']);
    }
    if (isset($acciones['fecha']))
    {
      if ($acciones['fecha'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($acciones['fecha']))
          {
            $value = $dateFormat->format($acciones['fecha'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $acciones['fecha'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->acciones->setFecha($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->acciones->setFecha(null);
      }
    }
  }

  protected function getAccionesOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $acciones = new Acciones();
    }
    else
    {
      $acciones = AccionesPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($acciones);
    }

    return $acciones;
  }

  protected function processFilters()
  {
    if ($this->getRequest()->hasParameter('filter'))
    {
      $filters = $this->getRequestParameter('filters');
      if (isset($filters['fecha']['from']) && $filters['fecha']['from'] !== '')
      {
        $filters['fecha']['from'] = sfI18N::getTimestampForCulture($filters['fecha']['from'], $this->getUser()->getCulture());
      }
      if (isset($filters['fecha']['to']) && $filters['fecha']['to'] !== '')
      {
        $filters['fecha']['to'] = sfI18N::getTimestampForCulture($filters['fecha']['to'], $this->getUser()->getCulture());
      }

      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/acciones/filters');
      $this->getUser()->getAttributeHolder()->add($filters, 'sf_admin/acciones/filters');
    }
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/acciones/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/acciones/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/acciones/sort'))
    {
    }
  }

  protected function addFiltersCriteria($c)
  {
    if (isset($this->filters['servicios_id_is_empty']))
    {
      $criterion = $c->getNewCriterion(AccionesPeer::SERVICIOS_ID, '');
      $criterion->addOr($c->getNewCriterion(AccionesPeer::SERVICIOS_ID, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['servicios_id']) && $this->filters['servicios_id'] !== '')
    {
      $c->add(AccionesPeer::SERVICIOS_ID, $this->filters['servicios_id']);
    }
    if (isset($this->filters['accion_is_empty']))
    {
      $criterion = $c->getNewCriterion(AccionesPeer::ACCION, '');
      $criterion->addOr($c->getNewCriterion(AccionesPeer::ACCION, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['accion']) && $this->filters['accion'] !== '')
    {
      $c->add(AccionesPeer::ACCION, strtr($this->filters['accion'], '*', '%'), Criteria::LIKE);
    }
    if (isset($this->filters['fecha_is_empty']))
    {
      $criterion = $c->getNewCriterion(AccionesPeer::FECHA, '');
      $criterion->addOr($c->getNewCriterion(AccionesPeer::FECHA, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['fecha']))
    {
      if (isset($this->filters['fecha']['from']) && $this->filters['fecha']['from'] !== '')
      {
        $criterion = $c->getNewCriterion(AccionesPeer::FECHA, date('Y-m-d', $this->filters['fecha']['from']), Criteria::GREATER_EQUAL);
      }
      if (isset($this->filters['fecha']['to']) && $this->filters['fecha']['to'] !== '')
      {
        if (isset($criterion))
        {
          $criterion->addAnd($c->getNewCriterion(AccionesPeer::FECHA, date('Y-m-d', $this->filters['fecha']['to']), Criteria::LESS_EQUAL));
        }
        else
        {
          $criterion = $c->getNewCriterion(AccionesPeer::FECHA, date('Y-m-d', $this->filters['fecha']['to']), Criteria::LESS_EQUAL);
        }
      }

      if (isset($criterion))
      {
        $c->add($criterion);
      }
    }
  }

  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/acciones/sort'))
    {
      $sort_column = AccionesPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/acciones/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'acciones{servicios_id}' => 'Cliente:',
      'acciones{accion}' => 'Acción:',
      'acciones{fecha}' => 'Fecha:',
    );
  }
}
