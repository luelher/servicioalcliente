<?php
// auto-generated by sfPropelAdmin
// date: 2007/11/27 01:10:27
?>
<?php

/**
 * autoServicios actions.
 *
 * @package    ##PROJECT_NAME##
 * @subpackage autoServicios
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id: actions.class.php 3501 2007-02-18 10:28:17Z fabien $
 */
class autoServiciosActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('servicios', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->filters = $this->getUser()->getAttributeHolder()->getAll('sf_admin/servicios/filters');

    // pager
    $this->pager = new sfPropelPager('Servicios', 20);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', 1));
    $this->pager->init();
  }

  public function executeCreate()
  {
    return $this->forward('servicios', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('servicios', 'edit');
  }

  public function executeEdit()
  {
    $this->servicios = $this->getServiciosOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateServiciosFromRequest();

      $this->saveServicios($this->servicios);

      $this->setFlash('notice', 'Your modifications have been saved');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('servicios/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('servicios/list');
      }
      else
      {
        return $this->redirect('servicios/edit?id='.$this->servicios->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->servicios = ServiciosPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->servicios);

    try
    {
      $this->deleteServicios($this->servicios);
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'Could not delete the selected Servicios. Make sure it does not have any associated items.');
      return $this->forward('servicios', 'list');
    }

    return $this->redirect('servicios/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->servicios = $this->getServiciosOrCreate();
    $this->updateServiciosFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function saveServicios($servicios)
  {
    $servicios->save();

  }

  protected function deleteServicios($servicios)
  {
    $servicios->delete();
  }

  protected function updateServiciosFromRequest()
  {
    $servicios = $this->getRequestParameter('servicios');

    if (isset($servicios['cliente']))
    {
      $this->servicios->setCliente($servicios['cliente']);
    }
    if (isset($servicios['nombre']))
    {
      $this->servicios->setNombre($servicios['nombre']);
    }
    if (isset($servicios['situacion']))
    {
      $this->servicios->setSituacion($servicios['situacion']);
    }
    if (isset($servicios['observacion']))
    {
      $this->servicios->setObservacion($servicios['observacion']);
    }
    if (isset($servicios['fecha']))
    {
      if ($servicios['fecha'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($servicios['fecha']))
          {
            $value = $dateFormat->format($servicios['fecha'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $servicios['fecha'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->servicios->setFecha($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->servicios->setFecha(null);
      }
    }
  }

  protected function getServiciosOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $servicios = new Servicios();
    }
    else
    {
      $servicios = ServiciosPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($servicios);
    }

    return $servicios;
  }

  protected function processFilters()
  {
    if ($this->getRequest()->hasParameter('filter'))
    {
      $filters = $this->getRequestParameter('filters');
      if (isset($filters['fecha']['from']) && $filters['fecha']['from'] !== '')
      {
        $filters['fecha']['from'] = sfI18N::getTimestampForCulture($filters['fecha']['from'], $this->getUser()->getCulture());
      }
      if (isset($filters['fecha']['to']) && $filters['fecha']['to'] !== '')
      {
        $filters['fecha']['to'] = sfI18N::getTimestampForCulture($filters['fecha']['to'], $this->getUser()->getCulture());
      }

      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/servicios/filters');
      $this->getUser()->getAttributeHolder()->add($filters, 'sf_admin/servicios/filters');
    }
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/servicios/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/servicios/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/servicios/sort'))
    {
    }
  }

  protected function addFiltersCriteria($c)
  {
    if (isset($this->filters['cliente_is_empty']))
    {
      $criterion = $c->getNewCriterion(ServiciosPeer::CLIENTE, '');
      $criterion->addOr($c->getNewCriterion(ServiciosPeer::CLIENTE, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['cliente']) && $this->filters['cliente'] !== '')
    {
      $c->add(ServiciosPeer::CLIENTE, strtr($this->filters['cliente'], '*', '%'), Criteria::LIKE);
    }
    if (isset($this->filters['fecha_is_empty']))
    {
      $criterion = $c->getNewCriterion(ServiciosPeer::FECHA, '');
      $criterion->addOr($c->getNewCriterion(ServiciosPeer::FECHA, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['fecha']))
    {
      if (isset($this->filters['fecha']['from']) && $this->filters['fecha']['from'] !== '')
      {
        $criterion = $c->getNewCriterion(ServiciosPeer::FECHA, date('Y-m-d', $this->filters['fecha']['from']), Criteria::GREATER_EQUAL);
      }
      if (isset($this->filters['fecha']['to']) && $this->filters['fecha']['to'] !== '')
      {
        if (isset($criterion))
        {
          $criterion->addAnd($c->getNewCriterion(ServiciosPeer::FECHA, date('Y-m-d', $this->filters['fecha']['to']), Criteria::LESS_EQUAL));
        }
        else
        {
          $criterion = $c->getNewCriterion(ServiciosPeer::FECHA, date('Y-m-d', $this->filters['fecha']['to']), Criteria::LESS_EQUAL);
        }
      }

      if (isset($criterion))
      {
        $c->add($criterion);
      }
    }
  }

  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/servicios/sort'))
    {
      $sort_column = ServiciosPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/servicios/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'servicios{cliente}' => 'Cédula:',
      'servicios{nombre}' => 'Nombre:',
      'servicios{situacion}' => 'Situación:',
      'servicios{observacion}' => 'Observación:',
      'servicios{fecha}' => 'Fecha:',
    );
  }
}
