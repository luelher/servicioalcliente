<?php
// auto-generated by sfPropelAdmin
// date: 2007/11/23 01:48:19
?>
<?php

/**
 * autoClientes actions.
 *
 * @package    ##PROJECT_NAME##
 * @subpackage autoClientes
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id: actions.class.php 3501 2007-02-18 10:28:17Z fabien $
 */
class autoClientesActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('clientes', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->filters = $this->getUser()->getAttributeHolder()->getAll('sf_admin/clientes/filters');

    // pager
    $this->pager = new sfPropelPager('Clientes', 15);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', 1));
    $this->pager->init();
  }

  public function executeCreate()
  {
    return $this->forward('clientes', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('clientes', 'edit');
  }

  public function executeEdit()
  {
    $this->clientes = $this->getClientesOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateClientesFromRequest();

      $this->saveClientes($this->clientes);

      $this->setFlash('notice', 'Your modifications have been saved');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('clientes/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('clientes/list');
      }
      else
      {
        return $this->redirect('clientes/edit?id='.$this->clientes->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->clientes = ClientesPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->clientes);

    try
    {
      $this->deleteClientes($this->clientes);
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'Could not delete the selected Clientes. Make sure it does not have any associated items.');
      return $this->forward('clientes', 'list');
    }

    return $this->redirect('clientes/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->clientes = $this->getClientesOrCreate();
    $this->updateClientesFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function saveClientes($clientes)
  {
    $clientes->save();

  }

  protected function deleteClientes($clientes)
  {
    $clientes->delete();
  }

  protected function updateClientesFromRequest()
  {
    $clientes = $this->getRequestParameter('clientes');

    if (isset($clientes['co_cli']))
    {
      $this->clientes->setCoCli($clientes['co_cli']);
    }
    if (isset($clientes['cli_des']))
    {
      $this->clientes->setCliDes($clientes['cli_des']);
    }
    if (isset($clientes['direc1']))
    {
      $this->clientes->setDirec1($clientes['direc1']);
    }
    if (isset($clientes['telefonos']))
    {
      $this->clientes->setTelefonos($clientes['telefonos']);
    }
  }

  protected function getClientesOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $clientes = new Clientes();
    }
    else
    {
      $clientes = ClientesPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($clientes);
    }

    return $clientes;
  }

  protected function processFilters()
  {
    if ($this->getRequest()->hasParameter('filter'))
    {
      $filters = $this->getRequestParameter('filters');

      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/clientes/filters');
      $this->getUser()->getAttributeHolder()->add($filters, 'sf_admin/clientes/filters');
    }
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/clientes/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/clientes/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/clientes/sort'))
    {
    }
  }

  protected function addFiltersCriteria($c)
  {
    if (isset($this->filters['co_cli_is_empty']))
    {
      $criterion = $c->getNewCriterion(ClientesPeer::CO_CLI, '');
      $criterion->addOr($c->getNewCriterion(ClientesPeer::CO_CLI, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['co_cli']) && $this->filters['co_cli'] !== '')
    {
      $c->add(ClientesPeer::CO_CLI, strtr($this->filters['co_cli'], '*', '%'), Criteria::LIKE);
    }
    if (isset($this->filters['cli_des_is_empty']))
    {
      $criterion = $c->getNewCriterion(ClientesPeer::CLI_DES, '');
      $criterion->addOr($c->getNewCriterion(ClientesPeer::CLI_DES, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['cli_des']) && $this->filters['cli_des'] !== '')
    {
      $c->add(ClientesPeer::CLI_DES, strtr($this->filters['cli_des'], '*', '%'), Criteria::LIKE);
    }
  }

  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/clientes/sort'))
    {
      $sort_column = ClientesPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/clientes/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'clientes{co_cli}' => 'Cédula:',
      'clientes{cli_des}' => 'Nombre:',
      'clientes{direc1}' => 'Dirección:',
      'clientes{telefonos}' => 'Teléfono:',
    );
  }
}
